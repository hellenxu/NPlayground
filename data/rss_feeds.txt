This XML file does not appear to have any style information associated with it. The document tree is shown below.
<rss version="2.0" xml:base="http://lambda-the-ultimate.org">
<channel>
<title>Lambda the Ultimate - Programming Languages Weblog</title>
<link>http://lambda-the-ultimate.org</link>
<description>
Programming languages news, articles and discussion
</description>
<language>en</language>
<item>
<title>
Applied Category Theory - The Emerging Science of Compositionality
</title>
<link>http://lambda-the-ultimate.org/node/5581</link>
<description>
<p >An enjoyable 25-minute introductory talk: <a href="https://www.youtube.com/watch?v=iwvl0tBJhoM">YOW! Lambda Jam 2019 - Ken Scambler - Applied Category Theory</a> (<a href="https://www.slideshare.net/kenbot/applied-category-theory-the-emerging-science-of-compositionality">slides</a>)</p> <blockquote ><p >What do programming, quantum physics, chemistry, neuroscience, systems biology, natural language parsing, causality, network theory, game theory, dynamical systems and database theory have in common?</p> <p >As functional programmers, we know how useful category theory can be for our work - or perhaps how abstruse and distant it can seem. What is less well known is that applying category theory to the real world is an exciting field of study that has really taken off in just the last few years. It turns out that we share something big with other fields and industries - we want to make big things out of little things without everything going to hell! The key is compositionality, the central idea of category theory.</p></blockquote> <p >Previously: <a href="http://lambda-the-ultimate.org/node/5571">Seven Sketches in Compositionality: An Invitation to Applied Category Theory</a>.</p> <p >(via <a href="https://twitter.com/puffnfresh">Brian McKenna</a>)</p>
</description>
<category domain="http://lambda-the-ultimate.org/taxonomy/term/22">Category Theory</category>
<category domain="http://lambda-the-ultimate.org/taxonomy/term/10">Paradigms</category>
<category domain="http://lambda-the-ultimate.org/taxonomy/term/25">Spotlight</category>
<pubDate>Mon, 05 Aug 2019 14:08:02 +0000</pubDate>
</item>
<item>
<title>Tensor Considered Harmful</title>
<link>
http://lambda-the-ultimate.org/tensor-considered-harmful
</link>
<description>
<p ><a href="http://nlp.seas.harvard.edu/NamedTensor">Tensor Considered Harmful</a>, by Alexander Rush</p> <blockquote ><p > TL;DR: Despite its ubiquity in deep learning, Tensor is broken. It forces bad habits such as exposing private dimensions, broadcasting based on absolute position, and keeping type information in documentation. This post presents a proof-of-concept of an alternative approach, <strong >named tensors</strong>, with named dimensions. This change eliminates the need for indexing, dim arguments, einsum- style unpacking, and documentation-based coding. The prototype <strong >PyTorch library</strong> accompanying this blog post is available as <a href="https://github.com/harvardnlp/NamedTensor">namedtensor</a>. </p></blockquote> <p >Thanks to Edward Z. Yang for pointing me to this "Considered Harmful" position paper.</p>
</description>
<category domain="http://lambda-the-ultimate.org/taxonomy/term/4">Critiques</category>
<category domain="http://lambda-the-ultimate.org/taxonomy/term/8">Implementation</category>
<category domain="http://lambda-the-ultimate.org/taxonomy/term/18">Teaching & Learning</category>
<pubDate>Thu, 27 Jun 2019 14:26:57 +0000</pubDate>
</item>
<item>
<title>
Seven Sketches in Compositionality: An Invitation to Applied Category Theory
</title>
<link>http://lambda-the-ultimate.org/node/5571</link>
<description>
<a href="http://xahlee.info/math/i/category_theory_brendan_fong_david_spivak_2018-03.pdf">Seven Sketches in Compositionality: An Invitation to Applied Category Theory</a> <p >2018 by Brendan Fong and David I. Spivak</p> <blockquote > Category theory is becoming a central hub for all of pure mathematics. It is unmatched in its ability to organize and layer abstractions, to find commonalities between structures of all sorts, and to facilitate communication between different mathematical communities. But it has also been branching out into science, informatics, and industry. We believe that it has the potential to be a major cohesive force in the world, building rigorous bridges between disparate worlds, both theoretical and practical. The motto at MIT is mens et manus, Latin for mind and hand. We believe that category theory—and pure math in general—has stayed in the realm of mind for too long; it is ripe to be brought to hand. </blockquote> A very approachable but useful introduction to category theory. It avoids the Scylla and Charybdis of becoming incomprehensible after page 2 (as many academic texts do), and barely scratching the surface (as many popular texts do).
</description>
<category domain="http://lambda-the-ultimate.org/taxonomy/term/22">Category Theory</category>
<category domain="http://lambda-the-ultimate.org/taxonomy/term/18">Teaching & Learning</category>
<pubDate>Sun, 28 Apr 2019 03:53:25 +0000</pubDate>
</item>
<item>
<title>
"Three Things I Wish I Knew When I Started Designing Languages"
</title>
<link>http://lambda-the-ultimate.org/node/5569</link>
<description>
<p ><a href="https://www.infoq.com/presentations/language-design-process">The transcript of <i >Three Things I Wish I Knew When I Started Designing Languages</i></a>, a talk given by Peter Alvaro somewhere or other, is up at Info Q.</p> <p >Peter Alavaro's main research interest is in taming distributed systems. He starts his talk with the provocative thesis, "In the future, all radical new languages will be domain-specific languages." He talks of the evolution of his ideas about dealing with distributed systems:</p> <ol > <li >Little interest by designers of programming-language designers in filling huge difficulty of debugging in context of distributed systems; <li >PLs often make handling of data somewhat implicit, even with functional programming, which he says is dangerous in distributed programming; <li >To talk about the flow of data properly, we need to talk about time; <li >Two things that influenced him as a grad student: Jeff Ullman's claim that encapsulation and declarativity are in tension, and <a href="https://en.wikipedia.org/wiki/Fagin%27s_theorem">Fagin's theorem</a> (the existential fragment of second-order logic characterises NP); <li >Idea that distributed systems can be considered as protocols specified a bit like SQL or Datalog queries; <li >Triviality with query languages of characterising the idea of place in distributive systems: they are just another relation parameter; <li >Describing evolution of a system in time can be done with two other things: counters and negation, leading to Bertram Ludäscher's language Statelog. But this way of doing things leads to the kind of low-level overexpressive modelling he was trying to avoid; <li >"What is it about...protocols that they seem to require negation to express?” Turns out that if you drop negation, you characterise the protocols that deliver messages deterministically. </ol> <p >He summarises by saying the only good reason to design a programming language (I assume he means a radically novel language) is to shape your understanding of the problem. No regrets of being the only user of his first language, Datalist, because the point is that it shaped all his later thought in his research.</p>
</description>
<category domain="http://lambda-the-ultimate.org/taxonomy/term/16">Parallel/Distributed</category>
<pubDate>Tue, 19 Mar 2019 00:20:53 +0000</pubDate>
</item>
<item>
<title>Selective Functors</title>
<link>
http://lambda-the-ultimate.org/story-selective-functors
</link>
<description>
<p >From Andrey Mokhov's twitter feed:</p> <blockquote ><p > Is there any intermediate abstraction between applicative functors and monads? And if yes, what is it? In a new paper with @geo2A, @simonmar and @dimenix we explore "selective functors", which are essentially applicative functors with branching: <a href="https://www.staff.ncl.ac.uk/andrey.mokhov/selective-functors.pdf">https://www.staff.ncl.ac.uk/andrey.mokhov/selective-functors.pdf</a></p> <p >We've implemented selective functors in Haskell: <a href="https://github.com/snowleopard/selective">https://github.com/snowleopard/selective</a>, OCaml: <a href="https://github.com/snowleopard/selective-ocaml">https://github.com/snowleopard/selective-ocaml</a>, and even Coq: <a href="https://github.com/tuura/selective-theory-coq">https://github.com/tuura/selective-theory-coq</a> (the Coq repository contains some proofs of correctness that our selective instances are lawful). And there is also a PureScript fork!</p></blockquote>
</description>
<category domain="http://lambda-the-ultimate.org/taxonomy/term/11">Functional</category>
<category domain="http://lambda-the-ultimate.org/taxonomy/term/8">Implementation</category>
<category domain="http://lambda-the-ultimate.org/taxonomy/term/15">Meta-Programming</category>
<pubDate>Tue, 05 Mar 2019 17:12:26 +0000</pubDate>
</item>
<item>
<title>The Little Typer</title>
<link>http://lambda-the-ultimate.org/node/5552</link>
<description>
<p >A new introductory book about dependent types, involving some familiar names:</p> <p ><strong ><a href="https://mitpress.mit.edu/books/little-typer">The Little Typer</a></strong></p> <p >by Daniel P. Friedman and David Thrane Christiansen.</p> <p >Foreword by Robert Harper.</p> <p >Afterword by Conor McBride.</p> <blockquote ><p > <strong >An introduction to dependent types, demonstrating the most beautiful aspects, one step at a time.</strong></p> <p >A program's type describes its behavior. Dependent types are a first-class part of a language, and are much more powerful than other kinds of types; using just one language for types and programs allows program descriptions to be as powerful as the programs they describe. The Little Typer explains dependent types, beginning with a very small language that looks very much like Scheme and extending it to cover both programming with dependent types and using dependent types for mathematical reasoning. Readers should be familiar with the basics of a Lisp-like programming language, as presented in the first four chapters of The Little Schemer.</p> <p >The first five chapters of The Little Typer provide the needed tools to understand dependent types; the remaining chapters use these tools to build a bridge between mathematics and programming. Readers will learn that tools they know from programming—pairs, lists, functions, and recursion—can also capture patterns of reasoning. The Little Typer does not attempt to teach either practical programming skills or a fully rigorous approach to types. Instead, it demonstrates the most beautiful aspects as simply as possible, one step at a time. </p></blockquote>
</description>
<category domain="http://lambda-the-ultimate.org/taxonomy/term/21">Type Theory</category>
<pubDate>Mon, 24 Sep 2018 04:29:49 +0000</pubDate>
</item>
<item>
<title>On compositionality</title>
<link>http://lambda-the-ultimate.org/node/5550</link>
<description>
<p >Jules Hedges has written a thought-provoking blog post, <a href="https://julesh.com/2017/04/22/on-compositionality/">On compositionality</a> where he connects the familiar idea of compositionality to the idea of emergent effects in nature, where systems can be understood as either having compositional properties or emergent properties.</p> <p >The key point about emergent systems is that they are hard to understand, and this is as true for engineering as it is for science. He goes on to say "As a final thought, I claim that compositionality is extremely delicate, and that it is so powerful that it is worth going to extreme lengths to achieve it", so that avoiding emergent effects is a characteristic of good programming language design.</p> <p >Some thoughts: </p> <ol > <li >His examples of emergent systems are biology and game theory from an economic perspective. I would add to this list physics: of <a href="https://arxiv.org/abs/1502.04573v2">his co-authored paper showing that the spectral gap is undecidable</a>, David Pérez-García said "For example, our results show that adding even a single particle to a lump of matter, however large, could in principle dramatically change its properties." <li >Spolsky's famous characterisation of interfaces built on shaky foundations as <a href="https://www.joelonsoftware.com/2002/11/11/the-law-of-leaky-abstractions/">Leaky abstractions</a> to me makes the distinction between compositional and emergent systems a little less than sharp. <li >We could talk endlessly about the list of what he regards as compositionality-breaking features of PLs. The evils of global state are well-documented, but I find dmbarbour's argument that <a href="https://awelonblue.wordpress.com/2012/10/21/local-state-is-poison/">Local state is poison</a> a very interesting alternative way to look at what properties do we want from code; more generally, what kind of compositionalty PLs offer is very much paradigm dependent. Gotos are considered harmful, but the Linux kernel has little trouble with longjmp because of its mandated coding style: compositionality in engineering is a not just a matter of semantics but also of use. He targets OO and Haskell's type classes - I think he is quite correct - note that within these paradigms one can regain compositionality by restricting to LSP or algebraic classes, and supporting his thesis we see that these ideas have spawned ideas for the design of new, cleaner PLs. </ol>
</description>
<category domain="http://lambda-the-ultimate.org/taxonomy/term/6">General</category>
<pubDate>Fri, 07 Sep 2018 09:53:12 +0000</pubDate>
</item>
<item>
<title>History of Lisp</title>
<link>http://lambda-the-ultimate.org/node/5548</link>
<description>
<p ><a href="http://jmc.stanford.edu/articles/lisp/lisp.pdf">History of Lisp</a> <em >(The history of LISP according to McCarthy's memory in 1978, presented at the ACM SIGPLAN History of Programming Languages Conference.)</em></p> <p >This is such a fun paper which I couldn't find on LtU. It's about the very early history of programming (1950s and '60s), back when things we take for granted today didn't exist yet.</p> <p >On taking apart complex data structures with functions like CAR and CDR:</p> <blockquote ><p >It was immediately apparent that arbitrary subexpressions of symbolic expressions could be obtained by composing the functions that extract immediate subexpressions, and this seemed reason enough to go to an algebraic language.</p></blockquote> <p >On creating new data, i.e. CONS:</p> <blockquote ><p >At some point a cons(a,d,p,t) was defined, but it was regarded as a subroutine and not as a function with a value. ... Gelernter and Gerberich noticed that cons should be a function, not just a subroutine, and that its value should be the location of the word that had been taken from the free storage list. This permitted new expressions to be constructed out of subsubexpressions by composing occurrences of cons</p></blockquote> <p >On inventing IF:</p> <blockquote ><p >This led to the invention of the true conditional expression which evaluates only one of N1 and N2 according to whether M is true or false and to a desire for a programming language that would allow its use.</p></blockquote> <p >On how supreme laziness led to the invention of garbage collection:</p> <blockquote ><p >Once we decided on garbage collection, its actual implementation could be postponed, because only toy examples were being done.</p></blockquote> <p >You might have heard this before:</p> <blockquote ><p >S.R. Russell noticed that eval could serve as an interpreter for LISP, promptly hand coded it, and we now had a programming language with an interpreter.</p></blockquote> <p >And the rest is history...</p>
</description>
<category domain="http://lambda-the-ultimate.org/taxonomy/term/5">Fun</category>
<category domain="http://lambda-the-ultimate.org/taxonomy/term/7">History</category>
<pubDate>Sat, 25 Aug 2018 17:43:23 +0000</pubDate>
</item>
<item>
<title>Notes on notation and thought</title>
<link>http://lambda-the-ultimate.org/node/5542</link>
<description>
<small>(via <a href="https://news.ycombinator.com/item?id=17632850">HN</a>)</small><p> A <a href="https://github.com/hypotext/notation">nice collection</a> of quotes on notation as a tool of thought. Mostly not programming related, which actually makes them more interesting, offering a richer diversity of examples. We used to have quite a few discussions of notation in the early days (at least in part because I never accepted the prevailing dogma that syntax is not that interesting or important), which is a good reminder for folks to check the archives.
</description>
<category domain="http://lambda-the-ultimate.org/taxonomy/term/6">General</category>
<pubDate>Sat, 28 Jul 2018 20:46:31 +0000</pubDate>
</item>
<item>
<title>Safe Dynamic Memory Management in Ada and SPARK</title>
<link>http://lambda-the-ultimate.org/node/5541</link>
<description>
<p ><a href="https://www.adacore.com/papers/safe-dynamic-memory-management-in-ada-and-spark">Safe Dynamic Memory Management in Ada and SPARK</a> by Maroua Maalej, Tucker Taft, Yannick Moy:</p> <blockquote ><p >Handling memory in a correct and efficient way is a step toward safer, less complex, and higher performing software-intensive systems. However, languages used for critical software development such as Ada, which supports formal verification with its SPARK subset, face challenges regarding any use of pointers due to potential pointer aliasing. In this work, we introduce an extension to the Ada language, and to its SPARK subset, to provide pointer types (“access types” in Ada) that provide provably safe, automatic storage management without any asynchronous garbage collection, and without explicit deallocation by the user. Because the mechanism for these safe pointers relies on strict control of aliasing, it can be used in the SPARK subset for formal verification, including both information flow analysis and proof of safety and correctness properties. In this paper, we present this proposal (which has been submitted for inclusion in the next version of Ada), and explain how we are able to incorporate these pointers into formal analyses</p></blockquote> <p >For the systems programmers among you, you might be interested in some new developments in Ada where they propose to add ownership types to Ada's pointer/access types, to improve the flexibility of the programs that can be written and whose safety can be automatically verified. The automated satisfiability of these safety properties is a key goal of the SPARK Ada subset.</p>
</description>
<category domain="http://lambda-the-ultimate.org/taxonomy/term/8">Implementation</category>
<category domain="http://lambda-the-ultimate.org/taxonomy/term/21">Type Theory</category>
<pubDate>Thu, 26 Jul 2018 19:42:01 +0000</pubDate>
</item>
<item>
<title> ICFP Programming Contest 2018</title>
<link>http://lambda-the-ultimate.org/node/5540</link>
<description>
<p >Yep, it <a href="https://icfpcontest2018.github.io/">on</a>!</p>
</description>
<category domain="http://lambda-the-ultimate.org/taxonomy/term/5">Fun</category>
<category domain="http://lambda-the-ultimate.org/taxonomy/term/11">Functional</category>
<pubDate>Sat, 21 Jul 2018 06:45:18 +0000</pubDate>
</item>
<item>
<title>Transfer of pywer</title>
<link>http://lambda-the-ultimate.org/node/5539</link>
<description>
<p >Guido van Rossum is <a href="https://mail.python.org/pipermail/python-committers/2018-July/005664.html">"resigning"</a> from being the Python BDFL: "I'm basically giving myself a permanent vacation from being BDFL, and you all will be on<br > your own." Apparently running a language can be tiring... It will be interesting to see what happens next.<br >
</description>
<category domain="http://lambda-the-ultimate.org/taxonomy/term/26">Python</category>
<pubDate>Thu, 12 Jul 2018 17:15:46 +0000</pubDate>
</item>
<item>
<title>Captcha </title>
<link>http://lambda-the-ultimate.org/node/5535</link>
<description>
<p >Note to those who tried to sign up but couldn't get passed the broken captcha: we removed it, so please try again. Email me directly to activate the account, once you've created it and got the automatic email.</p>
</description>
<category domain="http://lambda-the-ultimate.org/taxonomy/term/3">Admin</category>
<pubDate>Sun, 08 Jul 2018 06:36:55 +0000</pubDate>
</item>
<item>
<title>"C Is Not a Low-level Language"</title>
<link>http://lambda-the-ultimate.org/node/5534</link>
<description>
<p ><b >David Chisnall, <a href="https://queue.acm.org/detail.cfm?id=3212479">"C Is Not a Low-level Language. Your computer is not a fast PDP-11."</a>, ACM Queue, Volume 16, issue 2.</b></p> <blockquote ><p >"For a language to be "close to the metal," it must provide an abstract machine that maps easily to the abstractions exposed by the target platform. It's easy to argue that C was a low-level language for the PDP-11.<br > ...<br > it is possible to make C code run quickly but only by spending thousands of person-years building a sufficiently smart compiler—and even then, only if you violate some of the language rules. Compiler writers let C programmers pretend that they are writing code that is "close to the metal" but must then generate machine code that has very different behavior if they want C programmers to keep believing that they are using a fast language."</p></blockquote> <p >Includes a discussion of various ways in which modern processors break the C abstract machine, as well as some interesting speculation on what a "non-C processor" might look like. The latter leads to thinking about what a low-level language for such a processor should look like.</p>
</description>
<category domain="http://lambda-the-ultimate.org/taxonomy/term/7">History</category>
<category domain="http://lambda-the-ultimate.org/taxonomy/term/8">Implementation</category>
<category domain="http://lambda-the-ultimate.org/taxonomy/term/16">Parallel/Distributed</category>
<pubDate>Wed, 04 Jul 2018 03:09:16 +0000</pubDate>
</item>
<item>
<title>The Gentle Art of Levitation</title>
<link>http://lambda-the-ultimate.org/node/5526</link>
<description>
<a href="http://jmchapman.github.io/papers/levitation.pdf">The Gentle Art of Levitation</a> <p >2010 by James Chapman, Pierre-Evariste Dagand, Conor McBride, Peter Morrisy</p> <blockquote > We present a closed dependent type theory whose inductive types are given not by a scheme for generative declarations, but by encoding in a universe. Each inductive datatype arises by interpreting its description—a first-class value in a datatype of descriptions. Moreover, the latter itself has a description. Datatype-generic programming thus becomes ordinary programming. We show some of the resulting generic operations and deploy them in particular, useful ways on the datatype of datatype descriptions itself. Surprisingly this apparently self-supporting setup is achievable without paradox or infinite regress. </blockquote> It's datatype descriptions all the way down.
</description>
<category domain="http://lambda-the-ultimate.org/taxonomy/term/29">Semantics</category>
<category domain="http://lambda-the-ultimate.org/taxonomy/term/21">Type Theory</category>
<pubDate>Fri, 11 May 2018 19:26:31 +0000</pubDate>
</item>
</channel>
</rss>